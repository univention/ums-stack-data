# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023-2025 Univention GmbH

{{- if .Values.dataLoader.enabled }}
---
apiVersion: "batch/v1"
kind: "Job"
metadata:
  name: {{ include "nubus-common.names.fullnameWithRevision" . }}
  labels:
    {{- include "common.labels.standard" ( dict "customLabels" .Values.additionalLabels "context" . ) | nindent 4 }}
  {{- include "nubus-common.annotations.render" ( dict
    "values" ( list .Values.additionalAnnotations )
    "context" . )
    | nindent 2 }}
spec:
  backoffLimit: 6
  template:
    metadata:
      name: {{ include "common.names.name" . }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
      annotations:
        checksum/config: '{{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}'
        checksum/config-data: '{{ include (print $.Template.BasePath "/configmap-data.yaml") . | sha256sum }}'
        {{- if .Values.additionalAnnotations }}
        {{ toYaml .Values.additionalAnnotations | nindent 8 }}
        {{- end }}
    spec:
      restartPolicy: Never
      {{- include "nubus-common.images.renderPullSecrets" . | nindent 6 }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{ if .Values.stackDataUms.dependencyUdmApiWait }}
      initContainers:
      - name: "load-internal-plugins"
        {{- if .Values.containerSecurityContext.enabled }}
        securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
        image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ coalesce .Values.image.pullPolicy .Values.global.imagePullPolicy | quote }}
        command:
          - sh
          - -c
          - |
            mkdir -p /target/udm-data-loader
            cp -RLv --preserve=all /join-data/* /target/udm-data-loader
        volumeMounts:
          - name: plugin-targets
            mountPath: /target
          - name: data
            mountPath: /join-data
        resources: {{- include "common.tplvalues.render" (dict "value" .Values.initResources "context" .) | nindent 12 }}

      {{- $systemExtensions := default (list) (coalesce .Values.systemExtensions .Values.global.systemExtensions) -}}
      {{- $extensions := default (list) (coalesce .Values.extensions .Values.global.extensions) -}}
      {{- range (concat $systemExtensions $extensions) }}
      - name: "load-{{ .name }}-extension"
        {{- if $.Values.containerSecurityContext.enabled }}
        securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
        image: "{{ coalesce .image.registry $.Values.global.imageRegistry }}/{{ .image.repository }}:{{ .image.tag }}"
        imagePullPolicy: {{ coalesce .image.pullPolicy $.Values.global.imagePullPolicy | quote }}
        volumeMounts:
          - name: plugin-targets
            mountPath: /target
        resources: {{- include "common.tplvalues.render" (dict "value" $.Values.initResources "context" $) | nindent 12 }}
      {{- end }}
      - name: wait-for-udm-rest-api
        command: ["/bin/sh", "-c", "/usr/local/bin/wait-for-udm-rest-api.py"]
        {{- if $.Values.containerSecurityContext.enabled }}
        securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
        {{- with .Values.image }}
        image: "{{ coalesce .registry $.Values.global.imageRegistry }}/{{ .repository }}{{ if .sha256 }}@sha256:{{ .sha256 }}{{ else }}:{{ .tag }}{{ end }}"
        imagePullPolicy: {{ coalesce .pullPolicy $.Values.global.imagePullPolicy | quote }}
        {{- end }}
        envFrom:
          - configMapRef:
              name: {{ include "common.names.fullname" . }}
        volumeMounts:
          - name: secret-udm
            mountPath: /run/secrets/univention.de/data-loader/udm_secret
            subPath: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udm.auth.existingSecret "key" "password") | quote }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{ end }}
      containers:
      - name: "main"
        command:
          - process-all.sh
          - --template-context
          - /template-context/context.yaml
          {{- if .Values.stackDataUms.logContext }}
          - --log-context
          {{- end }}
          {{- if .Values.stackDataUms.logTemplate }}
          - --log-template
          {{- end }}
        {{- if $.Values.containerSecurityContext.enabled }}
        securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
        {{- with .Values.image }}
        image: "{{ coalesce .registry $.Values.global.imageRegistry }}/{{ .repository }}{{ if .sha256 }}@sha256:{{ .sha256 }}{{ else }}:{{ .tag }}{{ end }}"
        imagePullPolicy: {{ coalesce .pullPolicy $.Values.global.imagePullPolicy | quote }}
        {{- end }}
        envFrom:
          - configMapRef:
              name: {{ include "common.names.fullname" . }}
        env:
          - name: SET_STATUS_FLAG
            value: "true"
        volumeMounts:
          - name: secret-udm
            mountPath: /run/secrets/univention.de/data-loader/udm_secret
            subPath: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udm.auth.existingSecret "key" "password") | quote }}
          - name: "plugin-targets"
            mountPath: "/join-data"
            subPath: udm-data-loader
            readOnly: true
          - name: context-config
            mountPath: /template-context
            readOnly: true
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      volumes:
        - name: secret-udm
          secret:
            defaultMode: 0400
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.udm.auth.existingSecret "defaultNameSuffix" "udm" "context" .) | quote }}
        - name: "data"
          configMap:
            {{- $defaultConfigMapName := printf "%s-data" (include "common.names.fullname" . ) }}
            name: {{ default $defaultConfigMapName .Values.stackDataUms.dataConfigMapName | quote }}
        - name: "context-config"
          secret:
            secretName: "{{ include "common.names.fullname" . }}-context"
        - name: "plugin-targets"
          emptyDir: {}
{{- end }}
