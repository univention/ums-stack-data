---

# SPDX-FileCopyrightText: 2023-2025 Univention GmbH
# SPDX-License-Identifier: AGPL-3.0-only

include:
  - project: "univention/dev/nubus-for-k8s/common-ci"
    ref: "v1.43.3"
    file:
      - "defaults/stages.yaml"
      - "defaults/nubus-workflow.yaml"
      - "jobs/lint-pre-commit.yaml"
      - "jobs/lint-commit-messages.yaml"
      - "jobs/semantic-release-env.yaml"
      - "jobs/container-build-external.yaml"
      - "jobs/package-and-publish-helm-charts-external.yaml"
      - "jobs/check-debian-updates.yaml"
      - "templates/sonarqube.yaml"

.build-matrix: &build-matrix
  - IMAGE_NAME: "data-loader-test-runner"
    DOCKERFILE_PATH: "docker/data-loader/Dockerfile"
    KANIKO_ARGS: "--target test"
    KANIKO_BUILD_CONTEXT: "${CI_PROJECT_DIR}"
  - IMAGE_NAME: "data-loader"
    DOCKERFILE_PATH: "docker/data-loader/Dockerfile"
    KANIKO_ARGS: "--target final"
    KANIKO_BUILD_CONTEXT: "${CI_PROJECT_DIR}"
  - IMAGE_NAME: "joinscript-tools"
    KANIKO_BUILD_CONTEXT: "docker/joinscript-tools"

.publish-matrix: &publish-matrix
  - IMAGE_NAME:
      - "data-loader"

container-build:
  parallel:
    matrix: *build-matrix

container-malware-scan:
  parallel:
    matrix: *publish-matrix

test-data-loader-unittests:
  stage: "test"
  image: "${CI_REGISTRY_IMAGE}/data-loader-test-runner:${RELEASE_VERSION}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  script:
    - pytest --cov=src/ --cov-report=term-missing

test-data-loader-container:
  stage: "test"
  image: "${CI_REGISTRY_IMAGE}/data-loader:${RELEASE_VERSION}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: "never"
    - when: "on_success"
  script:
    - process-join-data --help

test-chart-unittests:
  stage: test
  needs: []
  image: "gitregistry.knut.univention.de/univention/dev/nubus-for-k8s/common-helm/testrunner:0.21.0"
  script:
    - helm dep build helm/stack-data-ums
    - pytest tests/chart

push-image-external:
  parallel:
    matrix: *publish-matrix

container-sign-external:
  parallel:
    matrix: *publish-matrix

check-debian-updates:
  parallel:
    matrix: *build-matrix
  variables:
    TARGET_IMAGE: "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest"

sonarqube:
  extends: .sonarqube
  needs: []

...
